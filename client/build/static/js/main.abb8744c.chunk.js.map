{"version":3,"sources":["components/utils/isEmpty.js","components/utils/Line.js","components/ArticleItem.js","components/ArticleList.js","components/utils/Loader.js","components/utils/Spinner.js","components/utils/firstUpper.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","value","undefined","Object","keys","length","trim","Line","showRed","className","ArticleItem","isKeywordInText","text","keyword","i","arr","toLowerCase","indexOf","push","wordsCount","split","state","article","query","intervalId","this","props","location","setState","history","window","pageYOffset","clearInterval","scroll","scrollStepInPx","setInterval","scrollStep","bind","delayInMs","data","type","filter","sectionType","paraIndex","sentence","a","console","log","to","title","authors","join","summary","abstract","map","t","body","section","onClick","scrollToTop","Component","ArticleList","getSnippet","snippet","splitByWords","len","words","cutOff","slice","substring","splitBySentence","sentences","articles","key","paper_id","pathname","Loader","Spinner","firstUpper","toUpperCase","Search","onSearch","e","f","preventDefault","target","replace","loading","getAPI","backend","hostname","axios","get","then","res","status","resultsLength","catch","err","error","searchable","match","params","href","onSubmit","id","onChange","required","for","dataLength","hasMore","next","loader","endMessage","style","textAlign","App","exact","path","component","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.abb8744c.chunk.js","sourcesContent":["const isEmpty = (value) => {\n    return (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\n        (typeof value === 'string' && value.trim().length === 0)\n    );\n}\n\nexport default isEmpty;","import React from 'react';\n\nconst Line = ({ showRed }) => {\n    return (\n        <div className=\"box\">\n            <div className={`box-sm ${showRed ? 'red-bg' : 'b1'}`}></div>\n            <div className={`box-sm ${showRed ? 'pink-bg' : 'b2'}`}></div>\n            <div className={`box-sm ${showRed ? 'purple-bg' : 'b3'}`}></div>\n        </div>\n    )\n}\n\nexport default Line;","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\nimport Line from './utils/Line';\n\nclass ArticleItem extends Component {\n    constructor(){\n        super();\n        this.state = {\n            article: {},\n            query: '',\n            intervalId: 0\n        };\n    }\n\n    componentDidMount () {\n        const { article, query } = this.props.location.state;\n\n        if (article && Object.keys(article).length > 0)\n            this.setState({ article, query });\n        else\n            this.props.history.push('/')\n    }\n\n    scrollStep() {\n        if (window.pageYOffset === 0) {\n            clearInterval(this.state.intervalId);\n        }\n        window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n    }\n    \n    scrollToTop() {\n        let intervalId = setInterval(this.scrollStep.bind(this), this.props.delayInMs);\n        this.setState({ intervalId: intervalId });\n    }\n\n    isSent(data, type, i , text) {\n        return data.filter(article => article.sectionType == type && article.paraIndex == i && text.indexOf(article.sentence) != -1)\n    }\n\n    getAllOccurrences(text, keyword){\n        var a=[],i=-1;\n        while((i=text.indexOf(keyword,i+1)) >= 0) a.push(i);\n        return a;\n      }\n\n    isKeywordInText = (text, keyword) => {\n        let i = -1;\n        let arr = [];\n        keyword = keyword.toLowerCase()\n\n        while((i=text.indexOf(keyword,i+1)) >= 0) {\n            arr.push(i)\n        }\n\n        return arr;\n    }\n\n    // renderBody = (paragraph) => {\n    //     const { query } = this.state;\n    //     let foundKeywordIndexs = this.isKeywordInText(paragraph, query);\n\n    //     return (\n    //         <p>\n    //             { foundKeywordIndexs.length > 0 ? paragraph.map((word) => {\n    //                 return (\n    //                     <>\n    //                         {paragraph.substr(0, index)}\n    //                         <span className=\"g-color\">{paragraph.substr(index, index + query.length)}</span>\n    //                         {paragraph.substr(index + query.length)}\n    //                     </>\n    //                 )}\n    //             ) : paragraph\n    //             }\n    //         </p>\n    //     )\n    // }\n\n    wordsCount = text => {\n        return text.trim().length > 0 ? text.trim().split(' ').length : 0\n    }\n\n    render() {\n        let { article, query } = this.state;\n\n        console.log(article)\n\n        return (\n            <div className=\"container m-50 mb-75\">\n                <div className=\"back-btn\">\n                    <Link to={`/${query}`} className=\"btn-floating btn-large waves-effect waves-light b-btn\"><i className=\"material-icons\">keyboard_backspace</i></Link>\n                </div>\n                { Object.keys(article).length > 0 ? (\n                    <>\n                        <h4 className=\"title\">{article.title}</h4>\n                        <div className=\"col s12 center m-25 offset-m2 l6 offset-l3\">\n                            <div className=\"card-panel grey lighten-5 z-depth-1\">\n                                <span className=\"black-text\">\n                                    { article.authors.length ? <i> Authors: {' '} {article.authors.join(', ')} </i> : null}\n                                </span>\n                            </div>\n                        </div>\n                        <Line showRed={true} />\n\n                        { article.summary.length ? (\n                            <div className=\"m-50\">\n                                <h4>Summary</h4>\n                                <p>{article.summary}</p>\n                            </div>\n                        ): null }\n                        \n                        { article.abstract.length && article.abstract[0].text && this.wordsCount(article.abstract[0].text) > 10 ? (\n                            <div className=\"abstract m-50\">\n                                <h4>Abstract</h4>\n                                {article.abstract.map((t, i) => {\n                                    return <p>{t.text}</p>\n                                })}\n                            </div>\n                        ) : null }\n\n                        <article className=\"m-50\">\n                            {article.body.map((t, i) => {\n\n                                let { section, text } = t;\n                                \n                                if (this.wordsCount(text) > 10) {\n                                    return (\n                                        <>\n                                            <h5 className=\"section\">{section}</h5>\n                                            <p>{text}</p>\n                                        </>\n                                    )\n                                }\n\n                                // let foundArticles = this.isSent(data, 'body', i, t.text)\n                                // if (foundArticles.length > 0) {\n                                    \n                                //     let sentences = t.text.split('. ');\n                                    \n                                //     html.push(<p>\n                                //         { sentences.map((sentence, index) => {\n                                //             let lastCharIsSpace = sentence.substr(sentence.length - 1) == ' ';\n                                //             return <span className={(foundArticles.filter(article => article.sentIndex == index)).length > 0 ? 'g-color' : ''}> {`${lastCharIsSpace ? sentence.substr(0, sentence.length - 1) : sentence}.`}</span>\n                                //         })}\n                                //     </p>)\n                                // } else { \n                                // }\n                            })}\n                        </article>\n                    </>\n                ) : (\n                    <div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>\n                )}\n                <div className=\"m-50 center\">\n                    <button title='Back to top' className=\"btn-floating btn-large waves-effect waves-light b-btn\" \n                        onClick={ () => { this.scrollToTop(); }}>\n                            <i className=\"material-icons\">keyboard_arrow_up</i>\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ArticleItem;\n\n//<a className=\"btn-floating pulse b-btn\"><i className=\"material-icons\">expand_more</i></a>\n\n//let startIndex = foundArticles.map(article => t.text.indexOf(article.sentence))\n//let endIndex = startIndex + foundArticles.sentence.length;\n//t.text = t.text.substring(t.text.indexOf(sentences[sentIndex-2]), sentences[t.sentIndex])","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\n\nclass ArticleList extends Component {\n\n    getSnippet = article => {\n        let snippet = ''\n        if (article.summary.length) {\n            snippet = article.summary\n        } else if (article.abstract.length > 0) {\n            snippet = article.abstract[0]['text']\n        } else {\n            snippet = article.body[0]['text']\n        }\n\n        snippet = this.splitByWords(snippet, 30);\n        \n        return snippet\n    }\n\n    splitByWords = (snippet, len) => {\n        let words = snippet.split(' ')\n        if (words.length > len) {\n            let cutOff = snippet.indexOf(words.slice(len).join(' ')) - 1;\n            snippet = snippet.substring(0, cutOff) + '...';\n        }\n        return snippet;\n    }\n\n    splitBySentence = snippet => {\n        let sentences = snippet.split('. ')\n        if (sentences.length > 2) {\n            let cutOff = snippet.indexOf(sentences[sentences.length - 1]) - 1;\n            snippet = snippet.substring(0, cutOff);\n            snippet += '..'\n        }\n        return snippet;\n    }\n\n    render() {\n        let { query, articles } = this.props;\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    { articles.map((article, i) => {\n                        return (\n                            <div className={`row article-item ${i % 2 == 0 ? 'light-bg' : ''}`}>\n                                <div className=\"col s11\" key={article.paper_id}>\n                                    <Link to={{ pathname: `/article/${article.paper_id}`, state: { article, query } }}>\n                                        <h5 className=\"article-title\"> {this.splitByWords(article.title, 20)} </h5>\n                                    </Link>\n                                    <p className=\"article-text\"> {this.getSnippet(article)} </p>\n                                </div>\n                                <div className=\"col s1 m-10\">\n                                    <Link to={{ pathname: `/article/${article.paper_id}`, state: { article, query } }}> <i className=\"small material-icons open_icon\">open_in_new</i></Link>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ArticleList;\n\n\n/*\n\n<table key={query} className=\"centered highlight\">\n                            <thead>\n                                <tr>\n                                    <th width='50%'> Snippet </th>\n                                    <th width='40%'> Title </th>\n                                    <th width='10%'> Article </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                            { articles.map(article => {\n                                return (\n                                    <tr key={article.paper_id}>\n                                        <td> {this.getSnippet(article)} </td>\n                                        <td> {article.title}</td>\n                                        <td> <Link to={{ pathname: `/article/${article.paper_id}`, state: { article, query } }}> <i className=\"small material-icons\">open_in_new</i></Link></td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                    */","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"progress\">\n            <div className=\"indeterminate\"></div>\n        </div>\n    )\n}\n\nexport default Loader;","import React from 'react';\n\nconst Spinner = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col s5\"/>\n            <div className=\"col s4\">\n                <div className=\"preloader-wrapper big active center\">\n                    <div className=\"spinner-layer spinner-blue\">\n                    <div className=\"circle-clipper left\">\n                        <div className=\"circle\"></div>\n                    </div><div className=\"gap-patch\">\n                        <div className=\"circle\"></div>\n                    </div><div className=\"circle-clipper right\">\n                        <div className=\"circle\"></div>\n                    </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col s4\"/>\n        </div>\n    )\n}\n\nexport default Spinner;","const firstUpper = (value) => {\n    if (typeof value === 'string' && value.length > 0) {\n        let firstLetter = value.substring(0,1).toUpperCase();\n        return firstLetter + value.substring(1);\n    }\n    return value;\n}\n\nexport default firstUpper;","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\nimport axios from 'axios';\nimport ArticleList from './ArticleList';\nimport Loader from './utils/Loader';\nimport Spinner from './utils/Spinner';\nimport Line from './utils/Line';\nimport firstUpper from './utils/firstUpper';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nclass Search extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            query: '',\n            articles: [],\n            error: null,\n            resultsLength: 5,\n            loading: true,\n            intervalId: 0,\n            title: 'Coronavirus Research Engine',\n            searchable: ['Health', 'Treatment', 'Cure', 'Illness', 'Disease', 'SARS', 'Drug discovery', 'Italy', 'China', 'Cough', 'Incubation']\n        };\n    }\n\n    componentDidMount () {\n        let { keyword } = this.props.match.params;\n        if (keyword) {\n            this.setState({ query: keyword }, () => this.getAPI(keyword));\n        }\n    }\n\n    scrollStep() {\n        if (window.pageYOffset === 0) {\n            clearInterval(this.state.intervalId);\n        }\n        window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n    }\n    \n    scrollToTop() {\n        let intervalId = setInterval(this.scrollStep.bind(this), this.props.delayInMs);\n        this.setState({ intervalId: intervalId });\n    }\n    \n    onSearch = (e, f=false) => {\n        let { query } = this.state;\n        let value = '';\n\n        if (f) {\n            value = e.toLowerCase();\n        } else {\n            e.preventDefault();\n            value = e.target.value.toLowerCase();\n        }\n        value = firstUpper(value.replace(/\\s\\s+/g, ' ').replace('.', ''));\n        if (query == value) return false;\n\n        this.setState({ query: value, loading: true }, value.length < 3 || isEmpty(value) ? null : () => this.getAPI(value));\n    }\n\n    getAPI = value => {\n        let backend = ''\n        if (window.location.hostname == 'localhost') {\n            backend = 'http://localhost:5000';\n        }\n\n        axios\n            .get(`${backend}/search?query=${value}`)\n            .then(res => {\n                if (res.status == 200) {\n\n                    let resultsLength = 5;\n                    let articles = res.data;\n\n                    if (articles.length < 5)\n                        resultsLength = articles.length\n\n                    this.setState({ articles, resultsLength, loading: false });\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ error: 'Server is down.' });\n            });\n    }\n\n    // _updateArticles = articles => {\n    //     let updated_list = {}\n    //     console.log(articles);\n\n    //     Object.entries(articles).map(([keyword, data]) => {\n    //         console.log(keyword, data);\n    //         updated_list[keyword] = {};\n\n    //         data.forEach(element => {\n    //             let article_id = element.article.paper_id;\n\n    //             let found = false;\n    //             Object.keys(updated_list[keyword]).forEach(id => {\n    //                 if (id == article_id) {\n    //                     found = id;\n    //                     //console.log('matching article')\n    //                 }\n    //             })\n\n    //             if (found) {\n    //                 updated_list[keyword][article_id].push(element)\n    //                 //console.log('appending new article')\n    //             } else {\n    //                 updated_list[keyword][article_id] = [element]\n    //                 //console.log('adding new article')\n    //             }\n    //         });\n\n    //     });\n    //     console.log(updated_list)\n    //     this.setState({ articles: updated_list, loading: false });\n    // }\n\n    render() {\n        let { loading, query, error, articles, searchable, resultsLength, title } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col m12\">\n                        <h1 className=\"title center\">{title}</h1>\n                    </div>\n                    <div className=\"col m2\">\n                        <div className=\"collection\">\n                            { searchable.map(value => <a href=\"#\" onClick={() => this.onSearch(value, 'searchable')} className={`collection-item b-color ${value.toLowerCase() == query.toLowerCase() ? 'active' : ''}`}>{value}</a>)}\n                        </div>\n                    </div>\n                    <div className=\"col m10 m-5\">\n                        <div className=\"col s12\">\n                            <nav className=\"b-btn\">\n                                <div className=\"nav-wrapper\">\n                                    <form onSubmit={e => e.preventDefault()}>\n                                        <div className=\"input-field\">\n                                            <input className=\"input-search\" id=\"search\" value={query} onChange={this.onSearch} type=\"search\" required/>\n                                            <label className=\"label-icon\" for=\"search\"><i className=\"material-icons\">search</i></label>\n                                            <i className=\"material-icons\">close</i>\n                                        </div>\n                                    </form>\n                                </div>\n                            </nav>  \n                        </div>\n                        <div className=\"col s12\">\n                            { loading && !isEmpty(query) ? (\n                                <Loader/>\n                            ) : articles.length > 0 ? (\n                                <div className=\"m-35\">\n                                    <h5 className=\"res-heading\">Articles found relating to {query}</h5>\n                                    <Line/>\n                                    { articles.length > 0 ? (\n                                        <InfiniteScroll\n                                            dataLength={resultsLength}\n                                            hasMore={resultsLength < articles.length}\n                                            next={() => this.setState({ resultsLength: resultsLength + 5})}\n                                            loader={<Spinner/>}\n                                            endMessage={\n                                                <div style={{textAlign: 'center'}}>\n                                                    <button title='Back to top' className=\"btn-floating btn-large waves-effect waves-light b-btn\" \n                                                        onClick={ () => { this.scrollToTop(); }}>\n                                                            <i className=\"material-icons\">keyboard_arrow_up</i>\n                                                    </button>\n                                                </div>\n                                            }\n                                            >\n                                            <ArticleList {...this.state} articles={articles.slice(0, resultsLength)} />\n                                        </InfiniteScroll>\n                                    ) : null}\n                                        \n                                </div>\n                            ) : !isEmpty(error) ? <p>{error}</p> : query ? <p> No articles found for \"{query}\"</p> : (\n                                <p className=\"info m-10 font-small\">\n                                    Search using a keyword, the engine will return the most relevant results among 30k scholar articles.\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport ArticleItem from './components/ArticleItem';\nimport Search from './components/Search';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n        <Route exact path=\"/\" component={Search} />\n        <Route exact path=\"/:keyword\" component={Search} />\n        <Route exact path=\"/article/:id\" component={ArticleItem} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}