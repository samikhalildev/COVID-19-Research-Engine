{"version":3,"sources":["components/utils/isEmpty.js","components/ArticleTable.js","components/utils/Loader.js","components/utils/Line.js","components/utils/firstUpper.js","components/ArticleList.js","components/Article.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","value","undefined","Object","keys","length","trim","ArticleTable","getSnippet","article","snippet","abstract","console","log","body","splitByWords","words","split","cutOff","indexOf","slice","join","substring","splitBySentence","sentences","state","this","props","query","articles","className","map","i","key","paper_id","title","to","pathname","Component","Loader","Line","showRed","firstUpper","toUpperCase","ArticleList","onSearch","e","f","toLowerCase","preventDefault","target","replace","setState","loading","getAPI","backend","window","location","hostname","axios","get","then","res","status","data","catch","err","_updateArticles","updated_list","entries","keyword","forEach","element","article_id","found","id","push","searchable","match","params","href","onClick","onSubmit","onChange","type","required","for","Article","history","text","filter","sectionType","paraIndex","sentence","previousSection","authors","t","html","section","App","exact","path","component","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.28c97ec4.chunk.js","sourcesContent":["const isEmpty = (value) => {\n    return (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\n        (typeof value === 'string' && value.trim().length === 0)\n    );\n}\n\nexport default isEmpty;","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\n\nclass ArticleTable extends Component {\n    constructor(){\n        super();\n        this.state = {\n            \n        };\n    }\n\n    getSnippet = article => {\n        let snippet = ''\n\n        if (article.abstract.length > 0) {\n            snippet = article.abstract[0]['text']\n            console.log(1)\n        } else {\n            snippet = article.body[0]['text']\n            console.log(2)\n        }\n\n        snippet = this.splitByWords(snippet);\n        \n        console.log(snippet)\n        return snippet\n    }\n\n    splitByWords = snippet => {\n        let words = snippet.split(' ')\n        if (words.length > 20) {\n            let cutOff = snippet.indexOf(words.slice(20).join(' ')) - 1;\n            snippet = snippet.substring(0, cutOff) + '...';\n        }\n        return snippet;\n    }\n\n    splitBySentence = snippet => {\n        let sentences = snippet.split('. ')\n        if (sentences.length > 2) {\n            let cutOff = snippet.indexOf(sentences[sentences.length - 1]) - 1;\n            snippet = snippet.substring(0, cutOff);\n            snippet += '..'\n        }\n        return snippet;\n    }\n\n    render() {\n        let { query, articles } = this.props;\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    { articles.map((article, i) => {\n                        return (\n                            <div className={`row article-item ${i % 2 == 0 ? 'light-bg' : ''}`}>\n                                <div className=\"col s11\" key={article.paper_id}>\n                                    <h5 className=\"article-title\"> {article.title} </h5>\n                                    <p className=\"article-text\"> {this.getSnippet(article)} </p>\n                                </div>\n                                <div className=\"col s1 m-10\">\n                                    <Link to={{ pathname: `/article/${article.paper_id}`, state: { article, query } }}> <i className=\"small material-icons open_icon\">open_in_new</i></Link>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ArticleTable;\n\n\n/*\n\n<table key={query} className=\"centered highlight\">\n                            <thead>\n                                <tr>\n                                    <th width='50%'> Snippet </th>\n                                    <th width='40%'> Title </th>\n                                    <th width='10%'> Article </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                            { articles.map(article => {\n                                return (\n                                    <tr key={article.paper_id}>\n                                        <td> {this.getSnippet(article)} </td>\n                                        <td> {article.title}</td>\n                                        <td> <Link to={{ pathname: `/article/${article.paper_id}`, state: { article, query } }}> <i className=\"small material-icons\">open_in_new</i></Link></td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                    */","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"progress\">\n            <div className=\"indeterminate\"></div>\n        </div>\n    )\n}\n\nexport default Loader;","import React from 'react';\n\nconst Line = ({ showRed }) => {\n    return (\n        <div className=\"box\">\n            <div className={`box-sm ${showRed ? 'red-bg' : 'b1'}`}></div>\n            <div className={`box-sm ${showRed ? 'pink-bg' : 'b2'}`}></div>\n            <div className={`box-sm ${showRed ? 'purple-bg' : 'b3'}`}></div>\n        </div>\n    )\n}\n\nexport default Line;","const firstUpper = (value) => {\n    if (typeof value === 'string' && value.length > 0) {\n        let firstLetter = value.substring(0,1).toUpperCase();\n        return firstLetter + value.substring(1);\n    }\n    return value;\n}\n\nexport default firstUpper;","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\nimport axios from 'axios';\nimport ArticleTable from './ArticleTable';\nimport Loader from './utils/Loader';\nimport Line from './utils/Line';\nimport firstUpper from './utils/firstUpper';\n\nclass ArticleList extends Component {\n    constructor(){\n        super();\n        this.state = {\n            query: '',\n            articles: [],\n            loading: false,\n            title: 'Coronavirus Research Engine',\n            searchable: ['Health', 'Treatment', 'Cure', 'Illness', 'Disease', 'SARS', 'Drug discovery', 'Italy', 'China', 'Cough', 'Incubation']\n        };\n    }\n\n    componentDidMount () {\n        let { keyword } = this.props.match.params;\n        if (keyword) {\n            this.setState({ query: keyword }, () => this.getAPI(keyword));\n        }\n    }\n\n    onSearch = (e, f=false) => {\n        let { query } = this.state;\n        let value = '';\n\n        if (f) {\n            value = e.toLowerCase();\n        } else {\n            e.preventDefault();\n            value = e.target.value.toLowerCase();\n        }\n        value = firstUpper(value.replace(/\\s\\s+/g, ' ').replace('.', ''));\n        if (query == value) return false;\n\n        this.setState({ query: value, loading: true }, value.length < 3 || isEmpty(value) ? null : () => this.getAPI(value));\n    }\n\n    getAPI = value => {\n        let backend = ''\n        if (window.location.hostname == 'localhost') {\n            backend = 'http://localhost:5000';\n        }\n\n        axios\n            .get(`${backend}/search?query=${value}`)\n            .then(res => {\n                if (res.status == 200) {\n                    this.setState({ articles: res.data, loading: false });\n                }\n            })\n            .catch(err =>\n                console.log(err)\n            );\n    }\n\n    _updateArticles = articles => {\n        let updated_list = {}\n        console.log(articles);\n\n        Object.entries(articles).map(([keyword, data]) => {\n            console.log(keyword, data);\n            updated_list[keyword] = {};\n\n            data.forEach(element => {\n                let article_id = element.article.paper_id;\n\n                let found = false;\n                Object.keys(updated_list[keyword]).forEach(id => {\n                    if (id == article_id) {\n                        found = id;\n                        //console.log('matching article')\n                    }\n                })\n\n                if (found) {\n                    updated_list[keyword][article_id].push(element)\n                    //console.log('appending new article')\n                } else {\n                    updated_list[keyword][article_id] = [element]\n                    //console.log('adding new article')\n                }\n            });\n\n        });\n        console.log(updated_list)\n        this.setState({ articles: updated_list, loading: false });\n    }\n\n    render() {\n        let { loading, query, articles, searchable, title } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col m12\">\n                        <h1 className=\"title center\">{title}</h1>\n                    </div>\n                    <div className=\"col m2\">\n                        <div className=\"collection\">\n                            { searchable.map(value => <a href=\"#\" onClick={() => this.onSearch(value, 'searchable')} className={`collection-item b-color ${value.toLowerCase() == query.toLowerCase() ? 'active' : ''}`}>{value}</a>)}\n                        </div>\n                    </div>\n                    <div className=\"col m10 m-5\">\n                        <div className=\"col s12\">\n                            <nav className=\"b-btn\">\n                                <div className=\"nav-wrapper\">\n                                    <form onSubmit={e => e.preventDefault()}>\n                                        <div className=\"input-field\">\n                                            <input className=\"input-search\" id=\"search\" value={query} onChange={this.onSearch} type=\"search\" required/>\n                                            <label className=\"label-icon\" for=\"search\"><i className=\"material-icons\">search</i></label>\n                                            <i className=\"material-icons\">close</i>\n                                        </div>\n                                    </form>\n                                </div>\n                            </nav>  \n                        </div>\n                        <div className=\"col s12\">\n                            { loading && !isEmpty(query) ? (\n                                <Loader/>\n                            ) : articles.length > 0 ? (\n                                <div className=\"m-35\">\n                                    <h5 className=\"res-heading\">Articles found relating to {query}</h5>\n                                    <Line/>\n                                    { articles.length > 0 ? <ArticleTable {...this.state} /> : null}\n                                </div>\n                            ) : query ? <p> No articles found for \"{query}\"</p> : (\n                                <p className=\"info m-10 font-small\">\n                                    Search using a keyword, the engine will return the most relevant results among 30k scholar articles.\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ArticleList;","import React, {Component} from 'react'\nimport { Link, withRouter } from 'react-router-dom';\nimport isEmpty from './utils/isEmpty';\nimport Line from './utils/Line';\n\nclass Article extends Component {\n    constructor(){\n        super();\n        this.state = {\n            article: {},\n            query: ''\n        };\n    }\n\n    componentDidMount () {\n        const { article, query } = this.props.location.state;\n\n        if (article && Object.keys(article).length > 0)\n            this.setState({ article, query });\n        else\n            this.props.history.push('/')\n    }\n\n\n    isSent(data, type, i , text) {\n        return data.filter(article => article.sectionType == type && article.paraIndex == i && text.indexOf(article.sentence) != -1)\n    }\n\n    render() {\n        let { article, query } = this.state;\n        let previousSection = '';\n\n        return (\n            <div className=\"container m-50 mb-75\">\n                <div className=\"back-btn\">\n                    <Link to={`/${query}`} className=\"btn-floating btn-large waves-effect waves-light b-btn\"><i className=\"material-icons\">keyboard_backspace</i></Link>\n                </div>\n                { Object.keys(article).length > 0 ? (\n                    <>\n                        <h4 className=\"title\">{article.title}</h4>\n                        <div className=\"col s12 center m-25 offset-m2 l6 offset-l3\">\n                            <div className=\"card-panel grey lighten-5 z-depth-1\">\n                                <span className=\"black-text\">\n                                    { article.authors.length ? <i> Authors: {' '} {article.authors.join(', ')} </i> : null}\n                                </span>\n                            </div>\n                        </div>\n                        <Line showRed={true} />\n                        <div className=\"abstract m-50\">\n                            <h4>Abstract</h4>\n                            {article.abstract.map((t, i) => {\n                                //let foundArticles = this.isSent(data, 'abstract', i, t.text)\n                                // if (foundArticles.length > 0) {\n                                //     let sentences = t.text.split('. ');\n                                //     return <p>\n                                //         { sentences.map((sentence, index) => {\n                                //             let lastCharIsSpace = sentence.substr(sentence.length - 1) == ' ';\n                                //             return <span className={(foundArticles.filter(article => article.sentIndex == index)).length > 0 ? 'g-color' : ''}> {`${lastCharIsSpace ? sentence.substr(0, sentence.length - 1) : sentence}.`}</span>\n                                //         })}\n                                //     </p>\n                                // }\n                                return <p>{t.text}</p>\n                            })}\n                        </div> \n\n                        <article className=\"m-50\">\n                            {article.body.map((t, i) => {\n                                let html = [];\n\n                                let {section} = t;\n\n                                if (i === 0 || previousSection != section) {\n                                    previousSection = section;\n                                    html.push(<h5 className=\"section\">{section}</h5>)\n                                }\n\n                                // let foundArticles = this.isSent(data, 'body', i, t.text)\n                                // if (foundArticles.length > 0) {\n                                    \n                                //     let sentences = t.text.split('. ');\n                                    \n                                //     html.push(<p>\n                                //         { sentences.map((sentence, index) => {\n                                //             let lastCharIsSpace = sentence.substr(sentence.length - 1) == ' ';\n                                //             return <span className={(foundArticles.filter(article => article.sentIndex == index)).length > 0 ? 'g-color' : ''}> {`${lastCharIsSpace ? sentence.substr(0, sentence.length - 1) : sentence}.`}</span>\n                                //         })}\n                                //     </p>)\n                                // } else { \n                                // }\n\n                                html.push(<p>{t.text}</p>)\n                                \n                                return html\n                            })}\n                        </article>\n                    </>\n                ) : (\n                    <div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>\n                )}\n                <div className=\"m-50 center\">\n                    <Link to={`/${query}`} className=\"btn-floating btn-large waves-effect waves-light b-btn\"><i className=\"material-icons\">keyboard_backspace</i></Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Article;\n\n//<a className=\"btn-floating pulse b-btn\"><i className=\"material-icons\">expand_more</i></a>\n\n//let startIndex = foundArticles.map(article => t.text.indexOf(article.sentence))\n//let endIndex = startIndex + foundArticles.sentence.length;\n//t.text = t.text.substring(t.text.indexOf(sentences[sentIndex-2]), sentences[t.sentIndex])","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport ArticleList from './components/ArticleList';\nimport Article from './components/Article';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n        <Route exact path=\"/\" component={ArticleList} />\n        <Route exact path=\"/:keyword\" component={ArticleList} />\n        <Route exact path=\"/article/:id\" component={Article} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}